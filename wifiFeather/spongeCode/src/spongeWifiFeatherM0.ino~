#include "SparkFunLSM6DS3.h"
#include <SPI.h>
#include <Wire.h>
#include <WiFi101.h>
#include <WiFiUdp.h>
#include <OSCMessage.h>
#include <OSCBundle.h>
#include <OSCData.h>
 
const char* ssid     = "mmLinksysEA7500-2.4";
const char* password = "ddcgrvc4zw";
 
WiFiUDP udp; // A UDP instance to let us send and receive packets over UDP
const IPAddress outIp(192,168,109,95); // remote IP of your computer
const unsigned int outPort = 50501; // remote port to receive OSC
const unsigned int localPort = 50502; // local port to listen for OSC packets

const int buttonPin = 12;

OSCErrorCode error;

LSM6DS3 SensorOne( SPI_MODE, 10 );

void setup(){
  //Configure pins for Adafruit ATWINC1500 Feather
  WiFi.setPins(8,7,4,2);
  
  Serial.begin(115200);
  analogReadResolution(12);
  pinMode(12, INPUT);
  /* Wire.begin(); */

  delay(100);
 
  // We start by connecting to a WiFi network
 
  Serial.println();
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  
  WiFi.begin(ssid, password);
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
 
  Serial.println("");
  Serial.println("WiFi connected");  
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());

  Serial.println("Starting UDP");
  udp.begin(localPort);
  Serial.print("Local port: ");
  Serial.println(localPort);
  //Over-ride default settings if desired
  // SensorOne.settings.gyroEnabled = 1;  //Can be 0 or 1
  // SensorOne.settings.gyroRange = 2000;   //Max deg/s.  Can be: 125, 245, 500, 1000, 2000
  // SensorOne.settings.gyroSampleRate = 1666;   //Hz.  Can be: 13, 26, 52, 104, 208, 416, 833, 1666
  // SensorOne.settings.gyroBandWidth = 400;  //Hz.  Can be: 50, 100, 200, 400;
  // SensorOne.settings.accelEnabled = 1;
  // SensorOne.settings.accelRange = 2;      //Max G force readable.  Can be: 2, 4, 8, 16
  // SensorOne.settings.accelSampleRate = 13;  //Hz.  Can be: 13, 26, 52, 104, 208, 416, 833, 1666, 3332, 6664, 13330
  // SensorOne.settings.accelBandWidth = 400;  //Hz.  Can be: 50, 100, 200, 400;
  // SensorOne.settings.fifoModeWord = 0;  //FIFO mode.
  //FIFO mode.  Can be:
  //  0 (Bypass mode, FIFO off)
  //  1 (Stop when full)
  //  3 (Continuous during trigger)
  //  4 (Bypass until trigger)
  //  6 (Continous mode)


  // delay(1000);

  // if( SensorOne.begin() != 0 )
  //   {
  //     Serial.println("Problem starting the sensor with CS @ Pin 10.");
  //   }
  // else
  //   {
  //   Serial.println("Sensor with CS @ Pin 10 started.");

  // }
}

void loop(){
  OSCMessage message;
  int size = udp.parsePacket();

  if (size) {
    while (size--) {
      message.fill(udp.read());
    }
    if (!message.hasError()) {
      /* message.dispatch("/set_register", osc_set_register); */
    } else {
      error = message.getError();
      Serial.print("error: ");
      Serial.println(error);
    }
  }

  // Serial.println( (SensorOne.readRawAccelX() >> 6) + 512);
  // Serial.print(SensorOne.readRawAccelY());
  // Serial.print(SensorOne.readRawAccelZ());
  // Serial.print(SensorOne.readRawGyroX());
  // Serial.print(SensorOne.readRawGyroY());
  // Serial.print(SensorOne.readRawGyroZ());


  // int anal0 = analogRead(1);
  // OSCBundle bndl;
  OSCMessage msg("/sponge"); // 8 bytes
  // OSCMessage time("/time");
  // uint64_t timetag;
  // msg.add(int(SensorOne.readRawAccelX()));
  // msg.add(int(SensorOne.readRawAccelY()));
  // msg.add(int(SensorOne.readRawAccelZ()));
  // msg.add(int(SensorOne.readRawGyroX()));
  // msg.add(int(SensorOne.readRawGyroY()));
  // msg.add(int(SensorOne.readRawGyroZ()));
  // msg.add(anal0);
  // types are ,iiiiiiiiiiiii // 4 bytes
  msg.add(digitalRead(buttonPin)); // 4 bytes
  // bndl.add("/sponge").add("one");
  msg.add(1).add(2).add(3).add(4).add(5).add(6).add(7).add(8).add(9).add(10).add(11).add(12); // 48 bytes of arbitrary ints.
  // Total size is 64 bytes. (excluding the UDP packet stuff)
  // time.add((uint32_t)micros() & 0xFFFF);
  udp.beginPacket(outIp, outPort);
  // bndl.setTimetag(oscTime());
  msg.send(udp);
  udp.endPacket();
  msg.empty();

  // wait a bit.
  delayMicroseconds(100);
}
